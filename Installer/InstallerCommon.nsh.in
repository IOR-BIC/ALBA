/*
	Installer Common Script for ALBA based Applications
	Author: Nicola Vanella
	BIC-IOR 2019
*/

!ifndef ___InstallerCommon___
!define ___InstallerCommon___

!include LogicLib.nsh
!include MUI2.nsh
!include Registry.nsh
!include nsProcess.nsh
!include EnumUsersReg.nsh
!include x64.nsh

!define PRODUCT_DIR_REGKEY "Software\Microsoft\Windows\CurrentVersion\App Paths\${PRODUCT_EXE_NAME}"
!define PRODUCT_UNINST_KEY "Software\Microsoft\Windows\CurrentVersion\Uninstall\${PRODUCT_NAME}"
!define PRODUCT_UNINST_ROOT_KEY "HKLM"

!define VS_RUNTIME "@VISUAL_STUDIO_RUNTIME@"
		
; MUI Settings
!define MUI_ABORTWARNING
!define MUI_ICON "${PRODUCT_INSTALLER_DIR_WIN}\${PRODUCT_NAME}.ico"
!define MUI_UNICON "${PRODUCT_INSTALLER_DIR_WIN}\${PRODUCT_NAME}Uninstall.ico"

!define MUI_HEADERIMAGE_BITMAP "${PRODUCT_INSTALLER_DIR_WIN}\header.bmp"
!define MUI_WELCOMEFINISHPAGE_BITMAP "${PRODUCT_INSTALLER_DIR_WIN}\welcome.bmp"

!define MUI_UNHEADERIMAGE_BITMAP "${PRODUCT_INSTALLER_DIR_WIN}\header.bmp"
!define MUI_UNWELCOMEFINISHPAGE_BITMAP "${PRODUCT_INSTALLER_DIR_WIN}\welcome.bmp"

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; IfKeyExists
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
!macro IfKeyExists ROOT MAIN_KEY KEY
	push $R0
	push $R1
	 
	!define Index 'Line${__LINE__}'
	 
	StrCpy $R1 "0"
	 
	"${Index}-Loop:"
	; Check for Key
	EnumRegKey $R0 ${ROOT} "${MAIN_KEY}" "$R1"
	StrCmp $R0 "" "${Index}-False"
	IntOp $R1 $R1 + 1
	StrCmp $R0 "${KEY}" "${Index}-True" "${Index}-Loop"
	 
	"${Index}-True:"
	;Return 1 if found
	push "1"
	goto "${Index}-End"
	 
	"${Index}-False:"
	;Return 0 if not found
	push "0"
	goto "${Index}-End"
	 
	"${Index}-End:"
	!undef Index
	exch 2
	pop $R0
	pop $R1
!macroend

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; defineifexist - Check if file exist in compile time
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
!macro !defineifexist _VAR_NAME _FILE_NAME
	!tempfile _TEMPFILE
	!ifdef NSIS_WIN32_MAKENSIS
		; Windows - cmd.exe
		!system 'if exist "${_FILE_NAME}" echo !define ${_VAR_NAME} > "${_TEMPFILE}"'
	!else
		; Posix - sh
		!system 'if [ -e "${_FILE_NAME}" ]; then echo "!define ${_VAR_NAME}" > "${_TEMPFILE}"; fi'
	!endif
	!include '${_TEMPFILE}'
	!delfile '${_TEMPFILE}'
	!undef _TEMPFILE
!macroend
!define !defineifexist "!insertmacro !defineifexist"

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Check If VS2015 Redistributable Package Is Already Installed
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;    
Function CheckIfVS2015RedistributablePackageIsAlreadyInstalled
	;-------------------------
	;Windows 7 64 Check
	;-------------------------
	${registry::Read} "HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\Microsoft\VisualStudio\14.0\VC\Runtimes\@INSTALLER_ARCH@" "Installed" $R0 $R1

	IntCmp $R0 1 registry_key_present1 registry_key_not_found1
	registry_key_present1:		 
		;MessageBox MB_OK "registry key found Value=$R0"
		;continue
		return
		 
	registry_key_not_found1:		 
		;MessageBox MB_OK "registry key not found Value=$R0"   
		;continue the check for other windows version ...
		 
	;-------------------------
	;Other Windows Check? (to be tested...)
	;-------------------------
	${registry::Read} "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\VisualStudio\14.0\VC\Runtimes\@INSTALLER_ARCH@" "Installed" $R0 $R1

	IntCmp $R0 1 registry_key_present2 registry_key_not_found2
	registry_key_present2:		 
		;MessageBox MB_OK "registry key found Value=$R0"
		;continue
		return
		 
	registry_key_not_found2:		 
		;MessageBox MB_OK "registry key not found Value=$R0"   
		 
		MessageBox MB_OK "\
	Microsoft Visual C++ 2015 Redistributable Package is needed in order \
	to install this application. The installer will now install them."
		 
		;ExecShell "open" "https://www.microsoft.com/en-us/download/details.aspx?id=30679"
		ExecWait '"$INSTDIR\bin\vc_redist.@INSTALLER_ARCH@.exe"'
FunctionEnd
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Setting Custom Pages
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
!macro Init_MUI

	!insertmacro EditLicencePage ; Optional
	
	; Installer pages ;;;;;;;;;;;;;;
	!insertmacro MUI_PAGE_WELCOME
	!insertmacro MUI_PAGE_LICENSE "${PRODUCT_INSTALLER_DIR_WIN}\${PRODUCT_NAME}Licence.rtf"
	!insertmacro MUI_PAGE_DIRECTORY
	;!insertmacro MUI_PAGE_INSTFILES
	;!insertmacro MUI_PAGE_FINISH

	!insertmacro  CheckOlderVersion
	
	!insertmacro MUI_PAGE_INSTFILES
	!define MUI_FINISHPAGE_NOAUTOCLOSE

	; Uninstaller pages ;;;;;;;;;;;;
	!define MUI_PAGE_CUSTOMFUNCTION_SHOW un.ModifyUnWelcome
	!define MUI_PAGE_CUSTOMFUNCTION_LEAVE un.LeaveUnWelcome
	!insertmacro MUI_UNPAGE_WELCOME
	!insertmacro MUI_UNPAGE_INSTFILES
	!insertmacro MUI_UNPAGE_FINISH

	; Language files
	!insertmacro MUI_LANGUAGE "English"
	!insertmacro MUI_RESERVEFILE_LANGDLL

!macroend

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; onInit 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
Function .onInit

	;"Check InstallDir"
	${If} ${RunningX64}
		;MessageBox MB_OK "Running on 64-bit Windows"
		StrCpy $INSTDIR "$PROGRAMFILES64\${PRODUCT_PUBLISHER}\${PRODUCT_NAME}"
	${Else}
		;MessageBox MB_OK "Running on 32-bit Windows"
	${EndIf}

	UserInfo::GetAccountType
	pop $0
	${If} $0 != "admin" ;Require admin rights on NT4+
		MessageBox mb_usericon "Please, Install ${PRODUCT_NAME} with administrator rights!"
		SetErrorLevel 740 ;ERROR_ELEVATION_REQUIRED
		Quit
	${EndIf}
	
App_Running_Check:
   ;Chech if app.exe process running? result is stored in $R0
   ${nsProcess::FindProcess} "${PRODUCT_NAME}.exe" $R0

   ${If} $R0 == 0
      MessageBox MB_RETRYCANCEL|MB_ICONEXCLAMATION "${PRODUCT_NAME} is currently running. Please stop it before continuing or exit." /SD IDCANCEL IDRETRY App_Running_Check
      Quit
   ${EndIf}

   ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   ;Chech if Extra app.exe process running? result is stored in $R0
   ${nsProcess::FindProcess} "${CHECK_EXTRA_PROCESS_ISRUNNING}" $R0

   ${If} $R0 == 0
      MessageBox MB_RETRYCANCEL|MB_ICONEXCLAMATION "${EXTRA_PRODUCT_EXE_NAME} is currently running. Please stop it before continuing or exit." /SD IDCANCEL IDRETRY App_Running_Check
      Quit
   ${EndIf}

FunctionEnd

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; un.onInit 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
Function un.onInit

App_Running_Check:
   ;Chech if app.exe process running? result is stored in $R0
   ${nsProcess::FindProcess} "${PRODUCT_NAME}.exe" $R0

   ${If} $R0 == 0
      MessageBox MB_RETRYCANCEL|MB_ICONEXCLAMATION "${PRODUCT_NAME} is currently running. Please stop it before continuing or exit." /SD IDCANCEL IDRETRY App_Running_Check
      Quit
   ${EndIf}
   
   ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   ;Chech if Extra app.exe process running? result is stored in $R0
   ${nsProcess::FindProcess} "${CHECK_EXTRA_PROCESS_ISRUNNING}" $R0

   ${If} $R0 == 0
      MessageBox MB_RETRYCANCEL|MB_ICONEXCLAMATION "${EXTRA_PRODUCT_EXE_NAME} is currently running. Please stop it before continuing or exit." /SD IDCANCEL IDRETRY App_Running_Check
      Quit
   ${EndIf}
   
FunctionEnd

Var removeAllcheckbox

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Edit UnWelcome Page - Unistaller
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
Function un.ModifyUnWelcome
	${NSD_CreateCheckbox} 120u -18u 50% 12u "Remove personal data for all users"
	Pop $removeAllcheckbox
	SetCtlColors $removeAllcheckbox "" "FFFFFF"
	${NSD_Uncheck} $removeAllcheckbox ; Uncheck it by default
FunctionEnd

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Erase App Data
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
Function un.LeaveUnWelcome
	${NSD_GetState} $removeAllcheckbox $0
	${If} $0 <> 0
	  DeleteRegKey ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}"
	  DeleteRegKey HKCU "${PRODUCT_DIR_REGKEY}"
	  DeleteRegKey HKCU "Software\${PRODUCT_NAME}"
	  ${un.EnumUsersReg} un.EraseAppDataCB temp.key
	${EndIf}
FunctionEnd

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Create Installer
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;    
!macro CreateInstaller
	Name "${PRODUCT_NAME} ${PRODUCT_VERSION}"
	OutFile "Setup_${PRODUCT_NAME}_${PRODUCT_VERSION}.exe"

	InstallDir "$PROGRAMFILES\${PRODUCT_PUBLISHER}\${PRODUCT_NAME}"
	
	InstallDirRegKey HKCU "${PRODUCT_DIR_REGKEY}" ""

	ShowInstDetails show
	ShowUnInstDetails show

	RequestExecutionLevel admin

	Section "create product directory structure" SEC01
		SetShellVarContext all
				
		RMDir /R "$INSTDIR"
		RMDir /R "$SMPROGRAMS\${PRODUCT_NAME}"
				
		Delete "$DESKTOP\${PRODUCT_NAME}.lnk"
					
		SetOutPath "$INSTDIR"
		SetOverwrite ifnewer
		CreateDirectory "$INSTDIR\bin"
		SetOutPath "$INSTDIR\bin"
		File "${PRODUCT_EXECUTABLE_OUTPUT_PATH_WIN}\${PRODUCT_EXE_NAME}"
		
		!insertmacro AddExtraFiles ; Optional
		
		File "${VS_RUNTIME}"
			  
		File /nonfatal "${PRODUCT_EXECUTABLE_OUTPUT_PATH_WIN}/*.dll"
			  
		WriteIniStr "$INSTDIR\${PRODUCT_NAME}.url" "InternetShortcut" "URL" "${PRODUCT_WEB_SITE}"
			  
		CreateShortCut "$DESKTOP\${PRODUCT_NAME}.lnk" "$INSTDIR\Bin\${PRODUCT_EXE_NAME}"
			  
		CreateDirectory "$SMPROGRAMS\${PRODUCT_NAME}"
		CreateShortCut "$SMPROGRAMS\${PRODUCT_NAME}\${PRODUCT_NAME}.lnk" "$INSTDIR\Bin\${PRODUCT_EXE_NAME}"
		CreateShortCut "$SMPROGRAMS\${PRODUCT_NAME}\Website.lnk" "$INSTDIR\${PRODUCT_NAME}.url"
		CreateShortCut "$SMPROGRAMS\${PRODUCT_NAME}\Uninstall.lnk" "$INSTDIR\uninst.exe"
		
		;Create Manual path	 		
		!ifdef PRODUCT_MANUAL_DIR
			CreateDirectory "$INSTDIR\Help"
			SetOutPath "$INSTDIR\Help"
			File /r /x /nonfatal "${PRODUCT_MANUAL_DIR}\*.*"
		!endif
 			  
		${!defineifexist} CONFIG_EXIST "${PRODUCT_INSTALLER_DIR_WIN}\Config"
		!ifdef CONFIG_EXIST
		!insertmacro AddConfigPath ;Optional	
		!endif	  

		; vme uploader downloader stuff: for the moment this is dependent on C:\LTM\Bonemat\Installer...
		; should we create another variable and put it in cmake GUI? 
										 
		SetOutPath "$INSTDIR\bin"
							
		Call CheckIfVS2015RedistributablePackageIsAlreadyInstalled
	
	SectionEnd

!macroend
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Create AddConfigPath
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
!macro AddConfigPath
		CreateDirectory "$INSTDIR\Config"
		SetOutPath "$INSTDIR\Config"
		File /r /x /nonfatal "${PRODUCT_INSTALLER_DIR_WIN}\Config\*.*"	
!macroend

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Create Uninstaller
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
!macro CreateUninstaller
	Section Uninstall
		SetShellVarContext all
		Delete "$DESKTOP\${PRODUCT_NAME}.lnk"

		RMDir /R "$INSTDIR"    
		RMDir /R "$SMPROGRAMS\${PRODUCT_NAME}" 
		
		!insertmacro RemoveExtraFiles ; Optional
		
		SetAutoClose true
	SectionEnd
!macroend

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Write Register Keys
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
!macro WriteRegKeys
	WriteUninstaller "$INSTDIR\uninst.exe"
	WriteRegStr HKCU "${PRODUCT_DIR_REGKEY}" "" "$INSTDIR"
	WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "DisplayName" "$(^Name)"
	WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "UninstallString" "$INSTDIR\uninst.exe"
	WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "DisplayIcon" "$INSTDIR\Bin\${PRODUCT_EXE_NAME}"
	WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "DisplayVersion" "${PRODUCT_VERSION}"
	WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "URLInfoAbout" "${PRODUCT_WEB_SITE}"
	WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "Publisher" "${PRODUCT_PUBLISHER}"
!macroend

!macro CheckOlderVersion
	Section
	IfFileExists "$INSTDIR\bin\${PRODUCT_EXE_NAME}" Ask_Question
	Goto INSTALL

	Ask_Question:
	MessageBox MB_YESNO "Another copy of this software is already installed.$\nWould you like to to overwrite it?" \
	IDYES INSTALL IDNO EXIT

	EXIT:
	Quit

	INSTALL:	
	SectionEnd
!macroend

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Erase App Data and Local App Data
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
Function "un.EraseAppDataCB"
	Pop $0
	ReadRegStr $0 HKU "$0\Software\Microsoft\Windows\CurrentVersion\Explorer\Shell Folders" "AppData"
	${If} $0 != ""
	RMDir /R "$0\${PRODUCT_NAME}"  
	${EndIf}

	ReadRegStr $0 HKU "$0\Software\Microsoft\Windows\CurrentVersion\Explorer\Shell Folders" "Local AppData"
	${If} $0 != ""
	RMDir /R "$0\${PRODUCT_NAME}"  
	${EndIf}
FunctionEnd

!endif

