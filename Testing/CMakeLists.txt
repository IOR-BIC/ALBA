# Load CppUnit stuff
INCLUDE(${ALBA_SOURCE_DIR}/Libraries/modules/FindCppUnit.cmake)
IF (CPPUNIT_RELEASE_FOUND OR CPPUNIT_DEBUG_FOUND)
  #MESSAGE("Found Cppunit library")
  INCLUDE_DIRECTORIES(${CPPUNIT_INCLUDE_DIR})
  IF(CPPUNIT_DEBUG_FOUND)
	LINK_LIBRARIES(debug ${CPPUNIT_DEBUG_LIBRARIES})
  ENDIF(CPPUNIT_DEBUG_FOUND)

  IF(CPPUNIT_RELEASE_FOUND)
	LINK_LIBRARIES(optimized ${CPPUNIT_RELEASE_LIBRARIES})
  ENDIF(CPPUNIT_RELEASE_FOUND)

ELSE (CPPUNIT_RELEASE_FOUND OR CPPUNIT_DEBUG_FOUND)
  MESSAGE("Cppunit library not found! Please fill the corresponding cache entries")
ENDIF (CPPUNIT_RELEASE_FOUND OR CPPUNIT_DEBUG_FOUND)

PROJECT(albaTests)

DBG_MESSAGE("Configuring project albaTESTS")

# Set your list of sources here.
SET(PROJECT_SRCS
  albaTest.cpp 				albaTest.h
  albaFakeLogicForTest.cpp 	albaFakeLogicForTest.h
	)

# List libraries that are needed by this project.
SET(PROJECT_LIBS ${wxWidgets_LIBRARIES} )

# Create the library.
ADD_LIBRARY(${PROJECT_NAME} ${PROJECT_SRCS})
TARGET_LINK_LIBRARIES(${PROJECT_NAME} ${PROJECT_LIBS})
 
OPTION(BUILD_BASE_TESTING "Enable building of testing for BASE classes" OFF)
IF (BUILD_BASE_TESTING)
  SUBDIRS(Base)
ENDIF (BUILD_BASE_TESTING)

OPTION(BUILD_CORE_TESTING "Enable building of testing for CORE classes" OFF)
IF (BUILD_CORE_TESTING)
  SUBDIRS(Core)
ENDIF (BUILD_CORE_TESTING)

OPTION(BUILD_GUI_TESTING "Enable building of testing for GUI classes" OFF)
IF (BUILD_GUI_TESTING)
  SUBDIRS(Gui)
ENDIF (BUILD_GUI_TESTING)

OPTION(BUILD_IO_TESTING "Enable building of testing for IO classes" OFF)
IF (BUILD_IO_TESTING)
  SUBDIRS(IO)
ENDIF (BUILD_IO_TESTING)

OPTION(BUILD_OPERATIONS_TESTING "Enable building of testing for OPERATIONS classes" OFF)
IF (BUILD_OPERATIONS_TESTING)
  SUBDIRS(Operations)
ENDIF (BUILD_OPERATIONS_TESTING)

OPTION(BUILD_COMMON_TESTING "Enable building of testing for COMMON classes" ON)
IF (BUILD_COMMON_TESTING)
  SUBDIRS(Common)
ENDIF (BUILD_COMMON_TESTING)

OPTION(BUILD_INTERACTION_TESTING "Enable building of testing for Interaction classes" OFF)
IF (BUILD_INTERACTION_TESTING)
  SUBDIRS(Interaction)
ENDIF (BUILD_INTERACTION_TESTING)

OPTION(BUILD_VIEWS_TESTING "Enable building of testing for View classes" ON)
IF (BUILD_VIEWS_TESTING)
  SUBDIRS(Views)
ENDIF (BUILD_VIEWS_TESTING)

OPTION(BUILD_VME_TESTING "Enable building of testing for VME classes" OFF)
IF (BUILD_VME_TESTING)
  SUBDIRS(VME)
ENDIF (BUILD_VME_TESTING)

OPTION(BUILD_VISUALPIPES_TESTING "Enable building of testing for VisualPipes classes" OFF)
IF (BUILD_VISUALPIPES_TESTING)
  SUBDIRS(VisualPipes)
ENDIF (BUILD_VISUALPIPES_TESTING)

OPTION(BUILD_vtkALBA_TESTING "Enable building of testing for vtkALBA classes" ON)
IF (BUILD_vtkALBA_TESTING)
  SUBDIRS(vtkALBA)
ENDIF (BUILD_vtkALBA_TESTING)
	
OPTION(BUILD_DATAPIPES_TESTING "Enable building of testing for DataPipe classes" OFF)
IF (BUILD_DATAPIPES_TESTING)
  SUBDIRS(VME/DataPipes)
ENDIF (BUILD_DATAPIPES_TESTING)

IF (ALBA_USE_WXMOZILLA)
  OPTION(BUILD_WXMOZILLA_TESTING "Enable building of testing wxMozilla" OFF)
  IF (BUILD_WXMOZILLA_TESTING)
    SUBDIRS(exMozilla)
  ENDIF (BUILD_WXMOZILLA_TESTING)
ENDIF (ALBA_USE_WXMOZILLA)
