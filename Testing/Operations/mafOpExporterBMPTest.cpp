/*=========================================================================

 Program: MAF2
 Module: mafOpExporterBMPTest
 Authors: Roberto Mucci
 
 Copyright (c) B3C
 All rights reserved. See Copyright.txt or
 http://www.scsitaly.com/Copyright.htm for details.

 This software is distributed WITHOUT ANY WARRANTY; without even
 the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
 PURPOSE.  See the above copyright notice for more information.

=========================================================================*/

#include "mafDefines.h" 
//----------------------------------------------------------------------------
// NOTE: Every CPP file in the MAF must include "mafDefines.h" as first.
// This force to include Window,wxWidgets and VTK exactly in this order.
// Failing in doing this will result in a run-time error saying:
// "Failure#0: The value of ESP was not properly saved across a function call"
//----------------------------------------------------------------------------

#include <cppunit/config/SourcePrefix.h>
#include "mafOpExporterBMPTest.h"

#include "mafOpExporterBmp.h"
#include "mafOpImporterImage.h"
#include "mafOpImporterVTK.h"

#include "mafString.h"
#include "mafVMEStorage.h"
#include "mafVMERoot.h"
#include "mafVMEVolumeGray.h"
#include "mafVMEImage.h"
#include "mafVMEOutputSurface.h"

#include "vtkImageMathematics.h"
#include "vtkMAFSmartPointer.h"
#include "vtkImageData.h"
#include "vtkStructuredPoints.h"
#include "vtkPointData.h"
#include "vtkPNGWriter.h"

void mafOpExporterBMPTest::TestFixture()
{
}

//-----------------------------------------------------------
void mafOpExporterBMPTest::TestConstructor()
//-----------------------------------------------------------
{
  mafOpExporterBmp *exporter = new mafOpExporterBmp("exporter bmp");
  mafDEL(exporter);
}

//-----------------------------------------------------------
void mafOpExporterBMPTest::TestExportBMP()
//-----------------------------------------------------------
{
	//Inizialize storage
	mafVMEStorage *storage = mafVMEStorage::New();
  storage->GetRoot()->SetName("root");
  storage->GetRoot()->Initialize();

	//Import the VTK Volume generated by the Original BMP files
	mafOpImporterVTK *importerVTK = new mafOpImporterVTK("importer");
  importerVTK->TestModeOn();
  importerVTK->SetInput(storage->GetRoot());
  mafString filename = MAF_DATA_ROOT;
  filename << "/Test_ExporterBMP/VolTestBMP.vtk";
  importerVTK->SetFileName(filename.GetCStr());
  importerVTK->ImportVTK();

	mafVMEVolumeGray *vmeVolumeGrayImported = mafVMEVolumeGray::SafeDownCast(importerVTK->GetOutput());
	vmeVolumeGrayImported->Update();

	//Inizialize exporter and export the stack of bmp
	mafOpExporterBmp *exporter=new mafOpExporterBmp("exporter bmp");
	exporter->TestModeOn();
	exporter->SetInput(vmeVolumeGrayImported);
	mafString filenameDir = GET_TEST_DATA_DIR();
	exporter->SetDirName(filenameDir);
  exporter->SetGrayscale(TRUE);
	exporter->SaveBmp();

	//Import the central bmp file generated by the exporter
  mafOpImporterImage *importerBMP = new mafOpImporterImage("importer");
  mafString filenameExporter = filenameDir;
  filenameExporter << "\\mafOpExporterBMPTest_1024x1024_0002.bmp";
  importerBMP->TestModeOn();
  importerBMP->SetInput(storage->GetRoot());
  importerBMP->SetFileName(filenameExporter);
  importerBMP->ImportImage();
  
  mafVMEImage *vmeImageExported = mafVMEImage::SafeDownCast(importerBMP->GetOutput());
  vmeImageExported->Update();

  //cast the mafVMEImage to a vtkImagedata to compare it with the original one
  vtkMAFSmartPointer<vtkImageData> DataExported;
  DataExported->SetDimensions(1024, 1024, 1);
  DataExported = vmeImageExported->GetImageOutput()->GetImageData();
  DataExported->Update();

  //Import the central iamge of the original bmp files from wich the volume has been created
  mafOpImporterImage *importerBMPOriginal = new mafOpImporterImage("importer");
  mafString filenameOriginal = MAF_DATA_ROOT;
  filenameOriginal << "/Test_ExporterBMP/Bn_2295_bc_0012.bmp"; ///
  importerBMPOriginal->TestModeOn();
  importerBMPOriginal->SetInput(storage->GetRoot());
	importerBMPOriginal->SetFileName(filenameOriginal);
  importerBMPOriginal->ImportImage();
	
	mafVMEImage *vmeImageOriginal = mafVMEImage::SafeDownCast(importerBMPOriginal->GetOutput());
	vmeImageOriginal->Update();

  //cast the mafVMEImage to a vtkImagedata to compare it with the one generated by the exporter
	vtkMAFSmartPointer<vtkImageData> DataOriginal;
  DataOriginal->SetDimensions(1024, 1024, 1);
  DataOriginal = vmeImageOriginal->GetImageOutput()->GetImageData();
  DataOriginal->Update();

  //SetOperationToSubtract subtract one image from the other one: the result 
  //image must be a black image, with all the scalars set to zero
  vtkMAFSmartPointer<vtkImageData> imageFinal;
  imageFinal->SetDimensions(1024, 1024, 1);
  vtkMAFSmartPointer<vtkImageMathematics> math;
  math->AddInput(DataOriginal);
  math->AddInput(DataExported);
  math->SetOperationToSubtract();
  math->Update();
  imageFinal = math->GetOutput();
  imageFinal->Update();

  int points = imageFinal->GetPointData()->GetNumberOfTuples();
  double sr[2];

  imageFinal->GetScalarRange(sr);
  CPPUNIT_ASSERT(mafEquals(sr[0],0.0));
  CPPUNIT_ASSERT(mafEquals(sr[1],0.0));

  vmeVolumeGrayImported = NULL;
  vmeImageExported = NULL;
  vmeImageOriginal = NULL;

  mafDEL(vmeImageExported);
  mafDEL(importerBMP);
  mafDEL(importerBMPOriginal);

  mafDEL(exporter);
  vtkDEL(importerVTK);
  mafDEL(storage);
}
