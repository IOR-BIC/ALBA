/*=========================================================================

 Program: ALBA (Agile Library for Biomedical Applications)
 Module: albaOpExporterBMPTest
 Authors: Roberto Mucci
 
 Copyright (c) BIC
 All rights reserved. See Copyright.txt or


 This software is distributed WITHOUT ANY WARRANTY; without even
 the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
 PURPOSE.  See the above copyright notice for more information.

=========================================================================*/

#include "albaDefines.h" 
//----------------------------------------------------------------------------
// NOTE: Every CPP file in the ALBA must include "albaDefines.h" as first.
// This force to include Window,wxWidgets and VTK exactly in this order.
// Failing in doing this will result in a run-time error saying:
// "Failure#0: The value of ESP was not properly saved across a function call"
//----------------------------------------------------------------------------

#include <cppunit/config/SourcePrefix.h>
#include "albaOpExporterBMPTest.h"

#include "albaOpExporterBmp.h"
#include "albaOpImporterImage.h"
#include "albaOpImporterVTK.h"

#include "albaString.h"
#include "albaVMEStorage.h"
#include "albaVMERoot.h"
#include "albaVMEVolumeGray.h"
#include "albaVMEImage.h"
#include "albaVMEOutputSurface.h"

#include "vtkImageMathematics.h"
#include "vtkALBASmartPointer.h"
#include "vtkImageData.h"
#include "vtkImageData.h"
#include "vtkPointData.h"
#include "vtkPNGWriter.h"

void albaOpExporterBMPTest::TestFixture()
{
}

//-----------------------------------------------------------
void albaOpExporterBMPTest::TestConstructor()
//-----------------------------------------------------------
{
  albaOpExporterBmp *exporter = new albaOpExporterBmp("exporter bmp");
  albaDEL(exporter);
}

//-----------------------------------------------------------
void albaOpExporterBMPTest::TestExportBMP()
//-----------------------------------------------------------
{
	//Initialize storage
	albaVMEStorage *storage = albaVMEStorage::New();
  storage->GetRoot()->SetName("root");
  storage->GetRoot()->Initialize();

	//Import the VTK Volume generated by the Original BMP files
	albaOpImporterVTK *importerVTK = new albaOpImporterVTK("importer");
  importerVTK->TestModeOn();
  importerVTK->SetInput(storage->GetRoot());
  albaString filename = ALBA_DATA_ROOT;
  filename << "/Test_ExporterBMP/VolTestBMP.vtk";
  importerVTK->SetFileName(filename.GetCStr());
  importerVTK->ImportVTK();

	albaVMEVolumeGray *vmeVolumeGrayImported = albaVMEVolumeGray::SafeDownCast(importerVTK->GetOutput());
	vmeVolumeGrayImported->Update();

	//Initialize exporter and export the stack of bmp
	albaOpExporterBmp *exporter=new albaOpExporterBmp("exporter bmp");
	exporter->TestModeOn();
	exporter->SetInput(vmeVolumeGrayImported);
	albaString filenameDir = GET_TEST_DATA_DIR();
	exporter->SetDirName(filenameDir);
  exporter->SetGrayscale(true);
	exporter->SaveBmp();

	//Import the central bmp file generated by the exporter
  albaOpImporterImage *importerBMP = new albaOpImporterImage("importer");
  albaString filenameExporter = filenameDir;
  filenameExporter << "\\albaOpExporterBMPTest_1024x1024_0002.bmp";
  importerBMP->TestModeOn();
  importerBMP->SetInput(storage->GetRoot());
  importerBMP->SetFileName(filenameExporter);
  importerBMP->ImportImage();
  
  albaVMEImage *vmeImageExported = albaVMEImage::SafeDownCast(importerBMP->GetOutput());
  vmeImageExported->Update();

  //cast the albaVMEImage to a vtkImagedata to compare it with the original one
  vtkALBASmartPointer<vtkImageData> DataExported;
  DataExported->SetDimensions(1024, 1024, 1);
  DataExported = vmeImageExported->GetImageOutput()->GetImageData();
  DataExported->Update();

  //Import the central image of the original bmp files from wich the volume has been created
  albaOpImporterImage *importerBMPOriginal = new albaOpImporterImage("importer");
  albaString filenameOriginal = ALBA_DATA_ROOT;
  filenameOriginal << "/Test_ExporterBMP/Bn_2295_bc_0012.bmp"; ///
  importerBMPOriginal->TestModeOn();
  importerBMPOriginal->SetInput(storage->GetRoot());
	importerBMPOriginal->SetFileName(filenameOriginal);
  importerBMPOriginal->ImportImage();
	
	albaVMEImage *vmeImageOriginal = albaVMEImage::SafeDownCast(importerBMPOriginal->GetOutput());
	vmeImageOriginal->Update();

  //cast the albaVMEImage to a vtkImagedata to compare it with the one generated by the exporter
	vtkALBASmartPointer<vtkImageData> DataOriginal;
  DataOriginal->SetDimensions(1024, 1024, 1);
  DataOriginal = vmeImageOriginal->GetImageOutput()->GetImageData();
  DataOriginal->Update();

  //SetOperationToSubtract subtract one image from the other one: the result 
  //image must be a black image, with all the scalars set to zero
  vtkALBASmartPointer<vtkImageData> imageFinal;
  imageFinal->SetDimensions(1024, 1024, 1);
  vtkALBASmartPointer<vtkImageMathematics> math;
  math->AddInput(DataOriginal);
  math->AddInput(DataExported);
  math->SetOperationToSubtract();
  math->Update();
  imageFinal = math->GetOutput();
  imageFinal->Update();

  int points = imageFinal->GetPointData()->GetNumberOfTuples();
  double sr[2];

  imageFinal->GetScalarRange(sr);
  CPPUNIT_ASSERT(albaEquals(sr[0],0.0));
  CPPUNIT_ASSERT(albaEquals(sr[1],0.0));

  vmeVolumeGrayImported = NULL;
  vmeImageExported = NULL;
  vmeImageOriginal = NULL;

  albaDEL(vmeImageExported);
  albaDEL(importerBMP);
  albaDEL(importerBMPOriginal);

  albaDEL(exporter);
  vtkDEL(importerVTK);
  albaDEL(storage);
}
