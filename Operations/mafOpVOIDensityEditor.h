/*=========================================================================

 Program: MAF2
 Module: mafOpVOIDensityEditor
 Authors: Matteo Giacomoni & Paolo Quadrani
 
 Copyright (c) B3C
 All rights reserved. See Copyright.txt or
 http://www.scsitaly.com/Copyright.htm for details.

 This software is distributed WITHOUT ANY WARRANTY; without even
 the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
 PURPOSE.  See the above copyright notice for more information.

=========================================================================*/

#ifndef __mafOpVOIDensityEditor_H__
#define __mafOpVOIDensityEditor_H__

//----------------------------------------------------------------------------
// Includes :
//----------------------------------------------------------------------------
#include "mafOp.h"
#include "mafVME.h"

//----------------------------------------------------------------------------
// forward references :
//----------------------------------------------------------------------------
class mafVME;
class vtkDataSet;

//----------------------------------------------------------------------------
// mafOpVOIDensityEditor :
//----------------------------------------------------------------------------
/** This class accepts mafVMEVolumeGray as input and take a surface as additional
input, then change the scalar density of the volumes' voxels inner the surface with
a density value given by the user. This operation is used in general after that a
mafVMEVolumeGray is generated by the mafOpCreateVolume operation.

@sa mafOpCreateVolume, mafVMEVolumeGray
*/
class MAF_EXPORT mafOpVOIDensityEditor: public mafOp
{
public:
	mafOpVOIDensityEditor(const wxString &label = "VOIDensityEditor");
	~mafOpVOIDensityEditor(); 
	virtual void OnEvent(mafEventBase *maf_event);
  
  mafTypeMacro(mafOpVOIDensityEditor, mafOp);

  /** return a copy of itself, this needs to put the operation into the undo stack. */
	mafOp* Copy();
	
	/** Return true for the acceptable vme type. */
	bool Accept(mafVME* Node);

	/** Set the input vme for the operation. */
	void OpRun();

  /** Execute the editing of the input voulme density region.*/
  void OpDo();

	/** Retrieve the previous state of the input VME. */
	void OpUndo();

	/**	Set surface of input in test mode*/
	void SetSurface(mafVME *Surface){m_Surface=Surface;};

  /** Scalar value used to fill volume region defined by the surface.*/
  void SetScalarValue(double fillScalar) {m_ScalarValue = fillScalar;};

  /** Get the scalar value used to fill volume region defined by the surface.*/
  double GetScalarValue() {return m_ScalarValue;}

  /** Change scalar density of the input volume that are inside the chosen surface with the given m_ScalarValue.*/
	void EditVolumeScalars();

 	static bool OutputSurfaceAccept(mafVME* Node) {return(Node != NULL && (Node->GetOutput()->IsA("mafVMEOutputSurface")));};

protected:
  mafVME *m_Surface; ///< Surface used to define the VOI in which write the constant density value.
  double   m_ScalarValue; ///< Scalar value that will fill the volume's voxel.
  double   m_CurrentTimestamp; ///< Timestamp of the input VME.
  vtkDataSet *m_OldData; ///< Volume data before the editing (used by the Undo mechanism).
};
#endif
