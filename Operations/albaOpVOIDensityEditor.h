/*=========================================================================

 Program: ALBA (Agile Library for Biomedical Applications)
 Module: albaOpVOIDensityEditor
 Authors: Matteo Giacomoni & Paolo Quadrani
 
 Copyright (c) BIC
 All rights reserved. See Copyright.txt or


 This software is distributed WITHOUT ANY WARRANTY; without even
 the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
 PURPOSE.  See the above copyright notice for more information.

=========================================================================*/

#ifndef __albaOpVOIDensityEditor_H__
#define __albaOpVOIDensityEditor_H__

//----------------------------------------------------------------------------
// Includes :
//----------------------------------------------------------------------------
#include "albaOp.h"
#include "albaVME.h"

//----------------------------------------------------------------------------
// forward references :
//----------------------------------------------------------------------------
class albaVME;
class vtkDataSet;

//----------------------------------------------------------------------------
// albaOpVOIDensityEditor :
//----------------------------------------------------------------------------
/** This class accepts albaVMEVolumeGray as input and take a surface as additional
input, then change the scalar density of the volumes' voxels inner the surface with
a density value given by the user. This operation is used in general after that a
albaVMEVolumeGray is generated by the albaOpCreateVolume operation.

@sa albaOpCreateVolume, albaVMEVolumeGray
*/
class ALBA_EXPORT albaOpVOIDensityEditor: public albaOp
{
public:
	albaOpVOIDensityEditor(const wxString &label = "VOIDensityEditor");
	~albaOpVOIDensityEditor(); 
	virtual void OnEvent(albaEventBase *alba_event);
  
  albaTypeMacro(albaOpVOIDensityEditor, albaOp);

  /** return a copy of itself, this needs to put the operation into the undo stack. */
	albaOp* Copy();

	/** Set the input vme for the operation. */
	void OpRun();

  /** Execute the editing of the input voulme density region.*/
  void OpDo();

	/** Retrieve the previous state of the input VME. */
	void OpUndo();

	/**	Set surface of input in test mode*/
	void SetSurface(albaVME *Surface){m_Surface=Surface;};

  /** Scalar value used to fill volume region defined by the surface.*/
  void SetScalarValue(double fillScalar) {m_ScalarValue = fillScalar;};

  /** Get the scalar value used to fill volume region defined by the surface.*/
  double GetScalarValue() {return m_ScalarValue;}

  /** Change scalar density of the input volume that are inside the chosen surface with the given m_ScalarValue.*/
	void EditVolumeScalars();

 	static bool OutputSurfaceAccept(albaVME* Node) {return(Node != NULL && (Node->GetOutput()->IsA("albaVMEOutputSurface")));};

protected:

	/** Return true for the acceptable vme type. */
	bool InternalAccept(albaVME*node);

  albaVME *m_Surface; ///< Surface used to define the VOI in which write the constant density value.
  double   m_ScalarValue; ///< Scalar value that will fill the volume's voxel.
  double   m_CurrentTimestamp; ///< Timestamp of the input VME.
  vtkDataSet *m_OldData; ///< Volume data before the editing (used by the Undo mechanism).
};
#endif
