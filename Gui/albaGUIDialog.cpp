/*=========================================================================

 Program: ALBA (Agile Library for Biomedical Applications)
 Module: albaGUIDialog
 Authors: Silvano Imboden
 
 Copyright (c) BIC
 All rights reserved. See Copyright.txt or


 This software is distributed WITHOUT ANY WARRANTY; without even
 the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
 PURPOSE.  See the above copyright notice for more information.

=========================================================================*/


#include "albaDefines.h" 
//----------------------------------------------------------------------------
// NOTE: Every CPP file in the ALBA must include "albaDefines.h" as first.
// This force to include Window,wxWidgets and VTK exactly in this order.
// Failing in doing this will result in a run-time error saying:
// "Failure#0: The value of ESP was not properly saved across a function call"
//----------------------------------------------------------------------------
#include <wx/statline.h>

#include "albaGUIDialog.h"
#include "wx/busyinfo.h"
#include "albaDecl.h"

//----------------------------------------------------------------------------
// Event Table:
//----------------------------------------------------------------------------
BEGIN_EVENT_TABLE(albaGUIDialog, wxDialog)
  EVT_BUTTON(wxID_OK, albaGUIDialog::nvOnOK)
  EVT_BUTTON(wxID_CANCEL, albaGUIDialog::nvOnCancel)
  EVT_BUTTON(wxID_CLOSE, albaGUIDialog::nvOnClose)
  EVT_BUTTON(wxOK, albaGUIDialog::nvOnOK)
  EVT_BUTTON(wxCANCEL, albaGUIDialog::nvOnCancel)
  EVT_SIZE(albaGUIDialog::OnSize)

/* todo: discover if the following syntax is valid -- if yes I can have the redefined handler called (if handler are virtual)
  EVT_CLOSE(OnCloseWindow)
  EVT_BUTTON(wxID_OK, OnOK)
  EVT_BUTTON(wxID_CANCEL, OnCancel)
  EVT_BUTTON(wxID_CLOSE, OnClose)
  EVT_BUTTON(wxOK, OnOK)
  EVT_BUTTON(wxCANCEL, OnCancel)
*/
END_EVENT_TABLE()

//----------------------------------------------------------------------------
albaGUIDialog::albaGUIDialog(const wxString& title,long style)
: wxDialog()
//----------------------------------------------------------------------------
{
  m_Listener = NULL;
  m_DialogInitialized = false;
  
  long s = wxCAPTION;
  if(style & albaRESIZABLE) 
    s |= wxRESIZE_BORDER;
  if(style & albaCLOSEWINDOW) 
  {
    s |= wxSYSTEM_MENU;
    s |= wxCLOSE_BOX;
  }

  Create(albaGetFrame(),-1,title,wxDefaultPosition,wxDefaultSize,s); 

  m_DialogSizer  =  new wxBoxSizer( wxVERTICAL );
  m_GuiSizer     =  new wxBoxSizer( wxVERTICAL );
  m_DialogSizer->Add(m_GuiSizer,1,wxEXPAND);

  m_ButtonsSizer =  NULL;
  m_OkButton     = NULL;
  m_CancelButton = NULL;
  m_CloseButton  = NULL;

  if(style & albaOK || style & albaCANCEL || style & albaCLOSE )
  {
    m_ButtonsSizer =  new wxBoxSizer( wxHORIZONTAL );

    wxBoxSizer *vsz = new wxBoxSizer(wxVERTICAL);
    vsz->Add(new wxStaticLine(this,-1),0,wxEXPAND | wxALL, 3);
    vsz->Add(m_ButtonsSizer,0,wxALIGN_CENTRE);

    m_DialogSizer->Add(vsz,0,wxEXPAND);
  }
  if( style & albaOK )
  {
    m_OkButton = new wxButton(this,wxID_OK,"ok");
    m_ButtonsSizer->Add(m_OkButton);
  }
  if( style & albaCANCEL )
  {
    m_CancelButton = new wxButton(this,wxID_CANCEL,"cancel");
    m_ButtonsSizer->Add(m_CancelButton);
  }
  if( (style & albaCLOSE) )
  {
    m_CloseButton = new wxButton(this,wxID_CLOSE,"close");
    m_ButtonsSizer->Add(m_CloseButton);
  }
  this->SetSizer( m_DialogSizer );
  SetMinSize(wxSize(200,100));
  SetSize(wxSize(200,100));
  m_DialogSizer->Fit(this);
}
//----------------------------------------------------------------------------
albaGUIDialog::~albaGUIDialog()
//----------------------------------------------------------------------------
{
  m_DialogInitialized = false;
}
//----------------------------------------------------------------------------
int albaGUIDialog::ShowModal()
//----------------------------------------------------------------------------
{
  if(! m_DialogInitialized )
  {
    // these operations are delayed from the Ctor,
    // to allow the user to Add other gui in the meanwhile
    
    m_DialogSizer->Layout();           // resize & fit the contents
		m_DialogSizer->SetSizeHints(this); // resize the dialog accordingly
    }
  return wxDialog::ShowModal();
}
//--------------------------------------------------------------------------------
void albaGUIDialog::OnEvent(albaEventBase *alba_event)
//--------------------------------------------------------------------------------
{
  // POURPOSE:
  // allow wxOK and wxCANCEL generated by a albaGUI to be considered 
  // like the corresponding events generated by normal buttons.
  if (albaEvent *e = albaEvent::SafeDownCast(alba_event))
  {
    switch(e->GetId())
    {
      case wxID_OK:
      case wxOK:
      {
        wxCommandEvent c(0, wxID_OK);
        OnOK(c);
      }
      break;
      case wxID_CANCEL:
      case wxCANCEL:
      {
        wxCommandEvent c(0, wxID_CANCEL);
        OnCancel(c);  
      }
      break;
      case wxID_CLOSE:
        wxDialog::Close(); // will call OnCloseWindow -- which will call OnCancel
      break;
      default:
        albaEventMacro(*e);
    }
  }
}

//----------------------------------------------------------------------------
void albaGUIDialog::WXSetInitialFittingClientSize(int flags, wxSizer* sizer /*= NULL*/)
{
	wxSize curSize = GetSize();
	wxSize minSize = GetMinSize();
	

	// Use the window sizer by default.
	if (!sizer)
	{
		sizer = GetSizer();

		// If there is none, we can't compute the fitting size.
		if (!sizer)
			return;
	}

	wxSize size = sizer->ComputeFittingClientSize(static_cast<wxWindow *>(this));

	size.Set(MAX(size.x, curSize.x), MAX(size.y, curSize.y));

	// It is important to set the min client size before changing the size
	// itself as the existing size hints could prevent SetClientSize() from
	// working otherwise.
	if (flags & wxSIZE_SET_MIN)
		SetMinClientSize(minSize);

	if (flags & wxSIZE_SET_CURRENT)
			SetClientSize(size);
}

//----------------------------------------------------------------------------
void albaGUIDialog::OnOK(wxCommandEvent &event)
//----------------------------------------------------------------------------
{
  //wxDialog::OnOK(event);
  /* --- this is what wxDialog::OnOK does
  // this is what is done 
  if ( Validate() && TransferDataFromWindow() )
  {
    SetReturnCode(wxID_OK);  
    Show(false);
  }
  Note that the Window just hidden, is not destroyed.  
  */

  //SIL 12-07-05
  // redefined because our TransferDataFromWindow
  // use a different semantic for the return value :
  //     wxWin - return false mean problem
  //     alba   - return false mean value not changed 
  if ( Validate()  )
  {
    TransferDataFromWindow();
    SetReturnCode(wxID_OK);  
    Show(false);
  }
}
//----------------------------------------------------------------------------
void albaGUIDialog::OnCancel(wxCommandEvent &event)
//----------------------------------------------------------------------------
{
  SetReturnCode(wxID_CANCEL);
  Show(false);
	Destroy();
}

//----------------------------------------------------------------------------
void albaGUIDialog::OnCloseWindow(wxCloseEvent &event)
{

}
