#
# Program:   ALBA (Agile Library for Biomedical Applications)
# Module:    $RCSfile: UseMFL.cmake.in,v $
# Language:  CMake 1.2
# Date:      $Date: 2007-03-21 14:03:33 $
# Version:   $Revision: 1.24 $
#
# Description:
# This module add the MFL include paths to a project
# It should be included after the FindMFL module. It works
# also if included from within the MFL build tree
#

SET(ALBA_USE_VTK @ALBA_USE_VTK@)
SET(ALBA_USE_ITK @ALBA_USE_ITK@)
SET(ALBA_USE_WX @ALBA_USE_WX@)
SET(ALBA_USE_VCOLLIDE @ALBA_USE_VCOLLIDE@)
SET(ALBA_USE_XercesC @ALBA_USE_XercesC@)
SET(ALBA_USE_CURL @ALBA_USE_CURL@)
SET(ALBA_USE_CRYPTO @ALBA_USE_CRYPTO@)
SET(ALBA_USE_GDCM @ALBA_USE_GDCM@)

# path to MFL binary directory
SET (MFL_BINARY_PATH @MFL_BINARY_DIR@)
SET (MFL_SOURCE_PATH @MFL_SOURCE_DIR@)

#
# VTK library
#
IF (ALBA_USE_VTK)
  INCLUDE (@MFL_BINARY_DIR@/modules/FindVTK.cmake)
  IF (VTK_FOUND)
    MESSAGE(STATUS "USE_MFL: Usining VTK library: ${VTK_USE_FILE}")
    INCLUDE(${VTK_USE_FILE})
  ELSE (VTK_FOUND)
    MESSAGE(FATAL_ERROR "USE_MFL: Cannot find required VTK library, cannot build!")
  ENDIF (VTK_FOUND)
ENDIF (ALBA_USE_VTK)
  
#
# XercesC library
#
IF (ALBA_USE_XercesC)
  SET (XercesC_POSSIBLE_ROOT_PATHS @MFL_BINARY_DIR@/XercesC/Build @MFL_SOURCE_DIR@/XercesC/Sources)
  FIND_FILE(XercesC_USE_FILE UseXercesC.cmake ${XercesC_POSSIBLE_ROOT_PATHS})
  FIND_PATH(XercesC_BINARY_PATH UseXercesC.cmake ${XercesC_POSSIBLE_ROOT_PATHS})
  IF (XercesC_USE_FILE)
    INCLUDE (${XercesC_USE_FILE}) # currently only local library is supported
  ENDIF (XercesC_USE_FILE)
ENDIF (ALBA_USE_XercesC)

#
# cURL library
#
IF (ALBA_USE_CURL)
  SET (CURL_POSSIBLE_ROOT_PATHS @MFL_BINARY_DIR@/CURL/Build @MFL_SOURCE_DIR@/CURL/Sources @MFL_BINARY_DIR@/CURL)
  FIND_FILE(CURL_USE_FILE UseCurl.cmake ${CURL_POSSIBLE_ROOT_PATHS})
  FIND_PATH(CURL_BINARY_PATH UseCurl.cmake ${CURL_POSSIBLE_ROOT_PATHS})
  IF (CURL_USE_FILE)
    INCLUDE (${CURL_USE_FILE}) # currently only local library is supported
  IF(NOT WIN32)
    EXEC_PROGRAM("pkg-config" ARGS "openssl --libs" OUTPUT_VARIABLE CURL_OPENSSL_LIB RETURN_VALUE RET)
    IF(RET)
      MESSAGE(${CURL_OPENSSL_LIB})
    ELSE(RET)
      SET(CMAKE_EXE_LINKER_FLAGS ${CURL_OPENSSL_LIB} CACHE STRING "" FORCE)
    ENDIF(RET)
  ENDIF(NOT WIN32)
  ENDIF (CURL_USE_FILE)
ENDIF (ALBA_USE_CURL)

#
# wxWindows library
#
IF (ALBA_USE_WX)
  SET (WXWINDOWS_POSSIBLE_ROOT_PATHS @MFL_BINARY_DIR@/wxWidgets/Build @MFL_SOURCE_DIR@/wxWidgets/Sources)
#2  FIND_FILE(WX_USE_FILE UseWX.cmake ${WXWINDOWS_POSSIBLE_ROOT_PATHS})
#2  FIND_PATH(WX_BINARY_PATH UseWX.cmake ${WXWINDOWS_POSSIBLE_ROOT_PATHS})

  FIND_FILE(WX_USE_FILE wxUse.cmake ${WXWINDOWS_POSSIBLE_ROOT_PATHS})
  FIND_PATH(WX_BINARY_PATH wxUse.cmake ${WXWINDOWS_POSSIBLE_ROOT_PATHS})
  
  IF (WIN32)   
    SET (WXWINDOWS_DEFINITIONS "${WXWINDOWS_DEFINITIONS} -D__WXMSW__")
  ENDIF (WIN32)
  IF (WX_USE_FILE)
    INCLUDE (${WX_USE_FILE})
#2  ELSE (WX_USE_FILE)
#2    INCLUDE ("${CMAKE_ROOT}/Modules/UsewxWidgets.cmake")
  ENDIF (WX_USE_FILE)
ENDIF (ALBA_USE_WX)

#
# GDCM library
#
IF (ALBA_USE_GDCM)
  SET (GDCM_POSSIBLE_ROOT_PATHS @MFL_BINARY_DIR@/GDCM/Build @MFL_SOURCE_DIR@/GDCM/Sources)
  FIND_FILE(GDCM_USE_FILE UseGDCM.cmake ${GDCM_POSSIBLE_ROOT_PATHS})
  FIND_FILE(GDCM_CONF_FILE GDCMConfig.cmake ${GDCM_POSSIBLE_ROOT_PATHS})
  FIND_PATH(GDCM_BINARY_PATH UseGDCM.cmake ${GDCM_POSSIBLE_ROOT_PATHS})
  IF (GDCM_USE_FILE AND GDCM_CONF_FILE)
		INCLUDE (${GDCM_CONF_FILE}) # currently only local library is supported
		INCLUDE (${GDCM_USE_FILE}) # currently only local library is supported
		SET(GDCM_LIBRARIES  gdcmcharls gdcmCommon gdcmDICT gdcmDSED gdcmexpat gdcmgetopt gdcmIOD gdcmjpeg12 gdcmjpeg16 gdcmjpeg8 gdcmMEXD gdcmMSFF gdcmopenjp2 gdcmzlib socketxx Rpcrt4)
  ENDIF (GDCM_USE_FILE AND GDCM_CONF_FILE)
ENDIF (ALBA_USE_GDCM)


#
# ITK library
#
IF (ALBA_USE_ITK)
  INCLUDE (@MFL_BINARY_DIR@/modules/FindITK.cmake)
  IF (ITK_FOUND)
    MESSAGE(STATUS "USE_MFL: Usining ITK library: ${ITK_USE_FILE}")
    INCLUDE(${ITK_USE_FILE})
    LINK_DIRECTORIES(${ITK_LIBRARY_DIRS})
    LINK_LIBRARIES(${ITK_LIBRARIES})
  ELSE (ITK_FOUND)
    MESSAGE(FATAL_ERROR "USE_MFL: Cannot find required ITK library, cannot build!")
  ENDIF (ITK_FOUND)
ENDIF (ALBA_USE_ITK)

#
# CRYPTO library
#
IF (ALBA_USE_CRYPTO)
  SET (CRYPTO_POSSIBLE_ROOT_PATHS @MFL_BINARY_DIR@/CRYPTO/Build @MFL_SOURCE_DIR@/CRYPTO/Sources)
  FIND_FILE(CRYPTO_USE_FILE UseCrypto.cmake ${CRYPTO_POSSIBLE_ROOT_PATHS})
  FIND_PATH(CRYPTO_BINARY_PATH UseCrypto.cmake ${CRYPTO_POSSIBLE_ROOT_PATHS})
  IF (CRYPTO_USE_FILE)
    INCLUDE (${CRYPTO_USE_FILE}) # currently only local library is supported
  ENDIF (CRYPTO_USE_FILE)
ENDIF (ALBA_USE_CRYPTO)


#
# BTK library
#
SET(ALBA_USE_BTK @ALBA_USE_BTK@)
IF (ALBA_USE_BTK)
	SET (BTK_POSSIBLE_ROOT_PATHS @MFL_BINARY_DIR@/BTK/Build @MFL_SOURCE_DIR@/BTK/Sources)
	FIND_FILE(BTK_USE_FILE UseBTK.cmake ${BTK_POSSIBLE_ROOT_PATHS})
	FIND_PATH(BTK_BINARY_PATH UseBTK.cmake ${BTK_POSSIBLE_ROOT_PATHS})
	IF (BTK_USE_FILE)
		INCLUDE (${BTK_USE_FILE}) # currently only local library is supported
	ENDIF (BTK_USE_FILE)
ENDIF (ALBA_USE_BTK)


#2 MARK_AS_ADVANCED (
#2 ALBA_USE_VTK
#2 ALBA_USE_WX
#2 ALBA_USE_ITK
#2 ALBA_USE_VCOLLIDE
#2 ALBA_USE_XercesC
#2 )
  
